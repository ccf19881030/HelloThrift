/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Hello_H
#define Hello_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "Hello_types.h"

namespace Demo {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class HelloIf {
 public:
  virtual ~HelloIf() {}
  virtual void helloString(std::string& _return, const std::string& para) = 0;
  virtual int32_t helloInt(const int32_t para) = 0;
  virtual bool helloBoolean(const bool para) = 0;
  virtual void helloVoid() = 0;
  virtual void helloNull(std::string& _return) = 0;
};

class HelloIfFactory {
 public:
  typedef HelloIf Handler;

  virtual ~HelloIfFactory() {}

  virtual HelloIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(HelloIf* /* handler */) = 0;
};

class HelloIfSingletonFactory : virtual public HelloIfFactory {
 public:
  HelloIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<HelloIf>& iface) : iface_(iface) {}
  virtual ~HelloIfSingletonFactory() {}

  virtual HelloIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(HelloIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<HelloIf> iface_;
};

class HelloNull : virtual public HelloIf {
 public:
  virtual ~HelloNull() {}
  void helloString(std::string& /* _return */, const std::string& /* para */) {
    return;
  }
  int32_t helloInt(const int32_t /* para */) {
    int32_t _return = 0;
    return _return;
  }
  bool helloBoolean(const bool /* para */) {
    bool _return = false;
    return _return;
  }
  void helloVoid() {
    return;
  }
  void helloNull(std::string& /* _return */) {
    return;
  }
};

typedef struct _Hello_helloString_args__isset {
  _Hello_helloString_args__isset() : para(false) {}
  bool para :1;
} _Hello_helloString_args__isset;

class Hello_helloString_args {
 public:

  Hello_helloString_args(const Hello_helloString_args&);
  Hello_helloString_args& operator=(const Hello_helloString_args&);
  Hello_helloString_args() : para() {
  }

  virtual ~Hello_helloString_args() throw();
  std::string para;

  _Hello_helloString_args__isset __isset;

  void __set_para(const std::string& val);

  bool operator == (const Hello_helloString_args & rhs) const
  {
    if (!(para == rhs.para))
      return false;
    return true;
  }
  bool operator != (const Hello_helloString_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Hello_helloString_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Hello_helloString_pargs {
 public:


  virtual ~Hello_helloString_pargs() throw();
  const std::string* para;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Hello_helloString_result__isset {
  _Hello_helloString_result__isset() : success(false) {}
  bool success :1;
} _Hello_helloString_result__isset;

class Hello_helloString_result {
 public:

  Hello_helloString_result(const Hello_helloString_result&);
  Hello_helloString_result& operator=(const Hello_helloString_result&);
  Hello_helloString_result() : success() {
  }

  virtual ~Hello_helloString_result() throw();
  std::string success;

  _Hello_helloString_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Hello_helloString_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Hello_helloString_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Hello_helloString_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Hello_helloString_presult__isset {
  _Hello_helloString_presult__isset() : success(false) {}
  bool success :1;
} _Hello_helloString_presult__isset;

class Hello_helloString_presult {
 public:


  virtual ~Hello_helloString_presult() throw();
  std::string* success;

  _Hello_helloString_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Hello_helloInt_args__isset {
  _Hello_helloInt_args__isset() : para(false) {}
  bool para :1;
} _Hello_helloInt_args__isset;

class Hello_helloInt_args {
 public:

  Hello_helloInt_args(const Hello_helloInt_args&);
  Hello_helloInt_args& operator=(const Hello_helloInt_args&);
  Hello_helloInt_args() : para(0) {
  }

  virtual ~Hello_helloInt_args() throw();
  int32_t para;

  _Hello_helloInt_args__isset __isset;

  void __set_para(const int32_t val);

  bool operator == (const Hello_helloInt_args & rhs) const
  {
    if (!(para == rhs.para))
      return false;
    return true;
  }
  bool operator != (const Hello_helloInt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Hello_helloInt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Hello_helloInt_pargs {
 public:


  virtual ~Hello_helloInt_pargs() throw();
  const int32_t* para;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Hello_helloInt_result__isset {
  _Hello_helloInt_result__isset() : success(false) {}
  bool success :1;
} _Hello_helloInt_result__isset;

class Hello_helloInt_result {
 public:

  Hello_helloInt_result(const Hello_helloInt_result&);
  Hello_helloInt_result& operator=(const Hello_helloInt_result&);
  Hello_helloInt_result() : success(0) {
  }

  virtual ~Hello_helloInt_result() throw();
  int32_t success;

  _Hello_helloInt_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Hello_helloInt_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Hello_helloInt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Hello_helloInt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Hello_helloInt_presult__isset {
  _Hello_helloInt_presult__isset() : success(false) {}
  bool success :1;
} _Hello_helloInt_presult__isset;

class Hello_helloInt_presult {
 public:


  virtual ~Hello_helloInt_presult() throw();
  int32_t* success;

  _Hello_helloInt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Hello_helloBoolean_args__isset {
  _Hello_helloBoolean_args__isset() : para(false) {}
  bool para :1;
} _Hello_helloBoolean_args__isset;

class Hello_helloBoolean_args {
 public:

  Hello_helloBoolean_args(const Hello_helloBoolean_args&);
  Hello_helloBoolean_args& operator=(const Hello_helloBoolean_args&);
  Hello_helloBoolean_args() : para(0) {
  }

  virtual ~Hello_helloBoolean_args() throw();
  bool para;

  _Hello_helloBoolean_args__isset __isset;

  void __set_para(const bool val);

  bool operator == (const Hello_helloBoolean_args & rhs) const
  {
    if (!(para == rhs.para))
      return false;
    return true;
  }
  bool operator != (const Hello_helloBoolean_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Hello_helloBoolean_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Hello_helloBoolean_pargs {
 public:


  virtual ~Hello_helloBoolean_pargs() throw();
  const bool* para;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Hello_helloBoolean_result__isset {
  _Hello_helloBoolean_result__isset() : success(false) {}
  bool success :1;
} _Hello_helloBoolean_result__isset;

class Hello_helloBoolean_result {
 public:

  Hello_helloBoolean_result(const Hello_helloBoolean_result&);
  Hello_helloBoolean_result& operator=(const Hello_helloBoolean_result&);
  Hello_helloBoolean_result() : success(0) {
  }

  virtual ~Hello_helloBoolean_result() throw();
  bool success;

  _Hello_helloBoolean_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Hello_helloBoolean_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Hello_helloBoolean_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Hello_helloBoolean_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Hello_helloBoolean_presult__isset {
  _Hello_helloBoolean_presult__isset() : success(false) {}
  bool success :1;
} _Hello_helloBoolean_presult__isset;

class Hello_helloBoolean_presult {
 public:


  virtual ~Hello_helloBoolean_presult() throw();
  bool* success;

  _Hello_helloBoolean_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Hello_helloVoid_args {
 public:

  Hello_helloVoid_args(const Hello_helloVoid_args&);
  Hello_helloVoid_args& operator=(const Hello_helloVoid_args&);
  Hello_helloVoid_args() {
  }

  virtual ~Hello_helloVoid_args() throw();

  bool operator == (const Hello_helloVoid_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Hello_helloVoid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Hello_helloVoid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Hello_helloVoid_pargs {
 public:


  virtual ~Hello_helloVoid_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Hello_helloVoid_result {
 public:

  Hello_helloVoid_result(const Hello_helloVoid_result&);
  Hello_helloVoid_result& operator=(const Hello_helloVoid_result&);
  Hello_helloVoid_result() {
  }

  virtual ~Hello_helloVoid_result() throw();

  bool operator == (const Hello_helloVoid_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Hello_helloVoid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Hello_helloVoid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Hello_helloVoid_presult {
 public:


  virtual ~Hello_helloVoid_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Hello_helloNull_args {
 public:

  Hello_helloNull_args(const Hello_helloNull_args&);
  Hello_helloNull_args& operator=(const Hello_helloNull_args&);
  Hello_helloNull_args() {
  }

  virtual ~Hello_helloNull_args() throw();

  bool operator == (const Hello_helloNull_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Hello_helloNull_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Hello_helloNull_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Hello_helloNull_pargs {
 public:


  virtual ~Hello_helloNull_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Hello_helloNull_result__isset {
  _Hello_helloNull_result__isset() : success(false) {}
  bool success :1;
} _Hello_helloNull_result__isset;

class Hello_helloNull_result {
 public:

  Hello_helloNull_result(const Hello_helloNull_result&);
  Hello_helloNull_result& operator=(const Hello_helloNull_result&);
  Hello_helloNull_result() : success() {
  }

  virtual ~Hello_helloNull_result() throw();
  std::string success;

  _Hello_helloNull_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Hello_helloNull_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Hello_helloNull_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Hello_helloNull_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Hello_helloNull_presult__isset {
  _Hello_helloNull_presult__isset() : success(false) {}
  bool success :1;
} _Hello_helloNull_presult__isset;

class Hello_helloNull_presult {
 public:


  virtual ~Hello_helloNull_presult() throw();
  std::string* success;

  _Hello_helloNull_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class HelloClient : virtual public HelloIf {
 public:
  HelloClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  HelloClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void helloString(std::string& _return, const std::string& para);
  void send_helloString(const std::string& para);
  void recv_helloString(std::string& _return);
  int32_t helloInt(const int32_t para);
  void send_helloInt(const int32_t para);
  int32_t recv_helloInt();
  bool helloBoolean(const bool para);
  void send_helloBoolean(const bool para);
  bool recv_helloBoolean();
  void helloVoid();
  void send_helloVoid();
  void recv_helloVoid();
  void helloNull(std::string& _return);
  void send_helloNull();
  void recv_helloNull(std::string& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class HelloProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<HelloIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (HelloProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_helloString(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_helloInt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_helloBoolean(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_helloVoid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_helloNull(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  HelloProcessor(::apache::thrift::stdcxx::shared_ptr<HelloIf> iface) :
    iface_(iface) {
    processMap_["helloString"] = &HelloProcessor::process_helloString;
    processMap_["helloInt"] = &HelloProcessor::process_helloInt;
    processMap_["helloBoolean"] = &HelloProcessor::process_helloBoolean;
    processMap_["helloVoid"] = &HelloProcessor::process_helloVoid;
    processMap_["helloNull"] = &HelloProcessor::process_helloNull;
  }

  virtual ~HelloProcessor() {}
};

class HelloProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  HelloProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< HelloIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< HelloIfFactory > handlerFactory_;
};

class HelloMultiface : virtual public HelloIf {
 public:
  HelloMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<HelloIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~HelloMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<HelloIf> > ifaces_;
  HelloMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<HelloIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void helloString(std::string& _return, const std::string& para) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->helloString(_return, para);
    }
    ifaces_[i]->helloString(_return, para);
    return;
  }

  int32_t helloInt(const int32_t para) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->helloInt(para);
    }
    return ifaces_[i]->helloInt(para);
  }

  bool helloBoolean(const bool para) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->helloBoolean(para);
    }
    return ifaces_[i]->helloBoolean(para);
  }

  void helloVoid() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->helloVoid();
    }
    ifaces_[i]->helloVoid();
  }

  void helloNull(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->helloNull(_return);
    }
    ifaces_[i]->helloNull(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class HelloConcurrentClient : virtual public HelloIf {
 public:
  HelloConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  HelloConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void helloString(std::string& _return, const std::string& para);
  int32_t send_helloString(const std::string& para);
  void recv_helloString(std::string& _return, const int32_t seqid);
  int32_t helloInt(const int32_t para);
  int32_t send_helloInt(const int32_t para);
  int32_t recv_helloInt(const int32_t seqid);
  bool helloBoolean(const bool para);
  int32_t send_helloBoolean(const bool para);
  bool recv_helloBoolean(const int32_t seqid);
  void helloVoid();
  int32_t send_helloVoid();
  void recv_helloVoid(const int32_t seqid);
  void helloNull(std::string& _return);
  int32_t send_helloNull();
  void recv_helloNull(std::string& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
