// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Hello.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::Demo;

class HelloHandler : virtual public HelloIf {
public:
	HelloHandler() {
		// Your initialization goes here
	}

	void helloString(std::string& _return, const std::string& para) {
		// Your implementation goes here
		printf("收到客户端发送的字符串：%s\n", para.c_str());
		_return = "hello from Server!";
	}

	int32_t helloInt(const int32_t para) {
		// Your implementation goes here
		//printf("helloInt\n");
		printf("收到客户端发送的数字：%d\n", para);

		return para * 100;
	}

	bool helloBoolean(const bool para) {
		// Your implementation goes here
		printf("helloBoolean\n");

		return para;
	}

	void helloVoid() {
		// Your implementation goes here
		printf("helloVoid\n");
	}

	void helloNull(std::string& _return) {
		// Your implementation goes here
		printf("helloNull\n");
	}

};

int main(int argc, char **argv) {
	int port = 9090;
	::apache::thrift::stdcxx::shared_ptr<HelloHandler> handler(new HelloHandler());
	::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new HelloProcessor(handler));
	::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
	::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
	::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

	TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
	printf("Thrift RPC Server started.\n");
	server.serve();

	return 0;
}

